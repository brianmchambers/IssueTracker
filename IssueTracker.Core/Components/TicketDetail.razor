@using IssueTracker.Core.Models
@using IssueTracker.Core.Services
@using Microsoft.AspNetCore.Components.Authorization

@inject ICurrentUserService CurrentUserService
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (Ticket != null)
{
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">@Ticket.Title</h5>
            <span class="badge bg-secondary">@Ticket.Status</span>
        </div>

        <div class="card-body">
            <p><strong>Assigned To:</strong> @(!string.IsNullOrWhiteSpace(Ticket.AssignedTo) ? Ticket.AssignedTo : "Unassigned")</p>
            <p><strong>Created:</strong> @Ticket.CreatedAt.ToLocalTime().ToString("MMM dd, yyyy hh:mm tt")</p>
            <p><strong>Description:</strong></p>
            <p class="text-muted">@Ticket.Description</p>
        </div>

        <div class="card-footer text-end">
            @if (Ticket.AssignedTo != userName && !string.IsNullOrWhiteSpace(userName))
            {
                <button class="btn btn-sm btn-outline-warning me-1"
                        @onclick="() => OpenAssignModal(Ticket)">
                    Assign To Me
                </button>
            }
            <button class="btn btn-sm btn-outline-primary"
                    @onclick="() => EditTicket(Ticket)">
                Edit
            </button>
            <button class="btn btn-sm btn-outline-danger"
                @onclick="() => OpenDeleteModal(Ticket)">
                Delete
            </button>
        </div>
    </div>

    <TicketAssign TicketToAssign="selectedTicketToAssign"
                  IsVisible="showAssignModal"
                  OnCancel="CloseAssignModal"
                  OnConfirmAssign="AssignTicketConfirmed" />

    <TicketEdit TicketToEdit="editingTicket"
                 OnClose="CloseModal"
                 OnSave="SaveTicket" />

    <TicketDelete TicketToDelete="selectedTicketToDelete"
                   IsVisible="showDeleteModal"
                   OnCancel="CloseDeleteModal"
                   OnConfirmDelete="DeleteTicketConfirmed" />
}

@code {
    private Ticket? editingTicket;
    private Ticket? selectedTicketToAssign;

    [Parameter]
    public EventCallback<Ticket> OnTicketUpdated { get; set; }

    [Parameter]
    public EventCallback<Ticket> OnTicketDeleted { get; set; }

    [Parameter]
    public EventCallback<Ticket> OnTicketAssigned { get; set; }

    private string? userName;

    protected override async Task OnInitializedAsync()
    {
        userName = await CurrentUserService.GetUserNameAsync();
    }

    private void EditTicket(Ticket ticket)
    {
        editingTicket = new Ticket
        {
            Id = ticket.Id,
            Title = ticket.Title,
            Description = ticket.Description,
            Status = ticket.Status,
            AssignedTo = ticket.AssignedTo,
            CreatedAt = ticket.CreatedAt,
            ProjectId = ticket.ProjectId
        };
    }

    private void CloseModal()
    {
        editingTicket = null;
    }

    private Ticket? selectedTicketToDelete;
    private bool showDeleteModal;
    private bool showAssignModal;

    private void OpenDeleteModal(Ticket ticket)
    {
        selectedTicketToDelete = ticket;
        showDeleteModal = true;
    }

    private void OpenAssignModal(Ticket ticket)
    {
        selectedTicketToAssign = ticket;
        showAssignModal = true;
    }

    private void CloseAssignModal()
    {
        selectedTicketToAssign = null;
        showAssignModal = false;
    }

    private void CloseDeleteModal()
    {
        selectedTicketToDelete = null;
        showDeleteModal = false;
    }

    private async Task AssignTicketConfirmed(Guid ticketId)
    {
        var assigned = await TicketService.GetByIdAsync(ticketId);
        if (assigned == null)
        {
            return; // Ticket not found
        }
        assigned.AssignedTo = userName;
        await TicketService.UpdateAsync(assigned);
        CloseAssignModal();
        StateHasChanged();
        await OnTicketAssigned.InvokeAsync(assigned);
    }

    private async Task DeleteTicketConfirmed(Guid ticketId)
    {
        var deleted = await TicketService.GetByIdAsync(ticketId);

        await TicketService.DeleteAsync(ticketId);

        CloseDeleteModal();
        StateHasChanged();

        await OnTicketDeleted.InvokeAsync(deleted);
    }

    private async Task SaveTicket(Ticket updated)
    {
        await TicketService.UpdateAsync(updated);

        Ticket = updated;

        await OnTicketUpdated.InvokeAsync(updated);

        editingTicket = null;
    }
}