@using IssueTracker.Core.Models

@if (TicketToAssign is not null && IsVisible)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content border-warning">
                <div class="modal-header bg-warning text-white">
                    <h5 class="modal-title">Assign Ticket</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="Cancel" />
                </div>

                <div class="modal-body">
                    <p>Are you sure you want to assign the following ticket?</p>
                    <ul>
                        <li><strong>Title:</strong> @TicketToAssign.Title</li>
                        <li><strong>Assigned To:</strong> @TicketToAssign.AssignedTo</li>
                        <li><strong>Status:</strong> @TicketToAssign.Status</li>
                    </ul>
                </div>

                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                    <button class="btn btn-warning" @onclick="ConfirmAssign">Assign</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public Ticket? TicketToAssign { get; set; }

    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public EventCallback<Guid> OnConfirmAssign { get; set; }

    private Task Cancel() => OnCancel.InvokeAsync();

    private Task ConfirmAssign() =>
        TicketToAssign is not null
            ? OnConfirmAssign.InvokeAsync(TicketToAssign.Id)
            : Task.CompletedTask;
}
